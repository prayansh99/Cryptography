keySize = dict(SIZE_128=16, SIZE_192=24, SIZE_256=32)


Rcon = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
            0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97,
            0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
            0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
            0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
            0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
            0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
            0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
            0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
            0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
            0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc,
            0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
            0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
            0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
            0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
            0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
            0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4,
            0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
            0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
            0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
            0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
            0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2,
            0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74,
            0xe8, 0xcb ]

sbox =  [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
            0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
            0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
            0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
            0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
            0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
            0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
            0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
            0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
            0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
            0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
            0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
            0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
            0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
            0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
            0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
            0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
            0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
            0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
            0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
            0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
            0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
            0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
            0x54, 0xbb, 0x16]


def getRconValue(num):

    return Rcon[num]

def rotate(word):

    return word[1:] + word[:1]

def getSBoxValue(num):
    return sbox[num]

def core(word, iteration):
    """Key schedule core."""
    # rotate the 32-bit word 8 bits to the left
    word = rotate(word)
    # apply S-Box substitution on all 4 parts of the 32-bit word
    for i in range(4):
        word[i] = getSBoxValue(word[i])
    # XOR the output of the rcon operation with i to the first part
    # (leftmost) only
    word[0] = word[0] ^ getRconValue(iteration)
    return word

def expandKey(key):

    size = 16
    expandedKeySize = 176

    # current expanded keySize, in bytes
    currentSize = 0
    rconIteration = 1
    expandedKey = [0] * expandedKeySize

    # set the 16, 24, 32 bytes of the expanded key to the input key
    for j in range(size):
        expandedKey[j] = key[j]
    currentSize += size

    while currentSize < expandedKeySize:
        # assign the previous 4 bytes to the temporary value t
        t = expandedKey[currentSize - 4:currentSize]

        # every 16,24,32 bytes we apply the core schedule to t
        # and increment rconIteration afterwards
        if currentSize % size == 0:
            t = core(t, rconIteration)
            rconIteration += 1
        # For 256-bit keys, we add an extra sbox to the calculation
        if size == keySize["SIZE_256"] and ((currentSize % size) == 16):
            for l in range(4): t[l] = getSBoxValue(t[l])

        # We XOR t with the four-byte block 16,24,32 bytes before the new
        # expanded key.  This becomes the next four bytes in the expanded
        # key.
        for m in range(4):
            expandedKey[currentSize] = expandedKey[currentSize - size] ^ \
                                       t[m]
            currentSize += 1

    newkey = []
    for i in range(11):
        addKey = []
        for j in range(4):
            addKey.append(expandedKey[i + j*4:i + (j+1)*4])
        addKey = list(map(list, zip(*addKey)))

        newkey.append(addKey)

    # newkey = list(map(list, zip(*newkey)))

    retKey = []

    return newkey

    # return expandedKey












subMat = [
	[0x63,0x7C,0x77,0x7B,0xF2,0x6B,0x6F,0xC5,0x30,0x01,0x67,0x2B,0xFE,0xD7,0xAB,0x76],
	[0xCA,0x82,0xC9,0x7D,0xFA,0x59,0x47,0xF0,0xAD,0xD4,0xA2,0xAF,0x9C,0xA4,0x72,0xC0],
	[0xB7,0xFD,0x93,0x26,0x36,0x3F,0xF7,0xCC,0x34,0xA5,0xE5,0xF1,0x71,0xD8,0x31,0x15],
	[0x04,0xC7,0x23,0xC3,0x18,0x96,0x05,0x9A,0x07,0x12,0x80,0xE2,0xEB,0x27,0xB2,0x75],
	[0x09,0x83,0x2C,0x1A,0x1B,0x6E,0x5A,0xA0,0x52,0x3B,0xD6,0xB3,0x29,0xE3,0x2F,0x84],
	[0x53,0xD1,0x00,0xED,0x20,0xFC,0xB1,0x5B,0x6A,0xCB,0xBE,0x39,0x4A,0x4C,0x58,0xCF],
	[0xD0,0xEF,0xAA,0xFB,0x43,0x4D,0x33,0x85,0x45,0xF9,0x02,0x7F,0x50,0x3C,0x9F,0xA8],
	[0x51,0xA3,0x40,0x8F,0x92,0x9D,0x38,0xF5,0xBC,0xB6,0xDA,0x21,0x10,0xFF,0xF3,0xD2],
	[0xCD,0x0C,0x13,0xEC,0x5F,0x97,0x44,0x17,0xC4,0xA7,0x7E,0x3D,0x64,0x5D,0x19,0x73],
	[0x60,0x81,0x4F,0xDC,0x22,0x2A,0x90,0x88,0x46,0xEE,0xB8,0x14,0xDE,0x5E,0x0B,0xDB],
	[0xE0,0x32,0x3A,0x0A,0x49,0x06,0x24,0x5C,0xC2,0xD3,0xAC,0x62,0x91,0x95,0xE4,0x79],
	[0xE7,0xC8,0x37,0x6D,0x8D,0xD5,0x4E,0xA9,0x6C,0x56,0xF4,0xEA,0x65,0x7A,0xAE,0x08],
	[0xBA,0x78,0x25,0x2E,0x1C,0xA6,0xB4,0xC6,0xE8,0xDD,0x74,0x1F,0x4B,0xBD,0x8B,0x8A],
	[0x70,0x3E,0xB5,0x66,0x48,0x03,0xF6,0x0E,0x61,0x35,0x57,0xB9,0x86,0xC1,0x1D,0x9E],
	[0xE1,0xF8,0x98,0x11,0x69,0xD9,0x8E,0x94,0x9B,0x1E,0x87,0xE9,0xCE,0x55,0x28,0xDF],
	[0x8C,0xA1,0x89,0x0D,0xBF,0xE6,0x42,0x68,0x41,0x99,0x2D,0x0F,0xB0,0x54,0xBB,0x16]
]

mixMat = [
 [0x02, 0x03, 0x01, 0x01],
 [0x01, 0x02, 0x03, 0x01],
 [0x01, 0x01, 0x02, 0x03],
 [0x03, 0x01, 0x01, 0x02],
]
def rotLeft(row: list, n):
    for i in range(n):
        row.append(row.pop(0))
    return row

def galoisMult(a, b):
    p = 0
    hiBitSet = 0
    for i in range(8):
        if b & 1 == 1:
            p ^= a
        hiBitSet = a & 0x80
        a <<= 1
        if hiBitSet == 0x80:
            a ^= 0x1b
        b >>= 1
    return p % 256
def matmult(a, b):
    # print(a)
    # print(b)
    c = [[0 for i in range(len(b[0]))]for j in range(len(a))]
    for i in range(len(a)):
        for j in range(len(b[0])):
            for k in range(len(b)):
                c[i][j]=c[i][j] ^ galoisMult(a[i][k],b[k][j])
    return c

def convertToHex(mat):
    for i in range(len(mat)):
        for j in range(len(mat[i])):
            mat[i][j] = hex(mat[i][j])[2:]
    return mat
    
def subBytes(plainMat, subMat):
    substitutedMat = [[None for i in range(4)] for j in range(4)]
    for i in range(4):
        for j in range(4):
            ijHex = hex(plainMat[i][j])[2:]
            ijHex = "0"*(2-len(ijHex)) + ijHex
            row = int(ijHex[0], 16)
            col = int(ijHex[1], 16)
            substitutedMat[i][j] = subMat[row][col]
    return substitutedMat

def shiftRows(plainMat):
    for i in range(1,4):
        plainMat[i] = rotLeft(plainMat[i], i)
    return plainMat

def mixColumns(plainMat, consMat):
    return matmult(consMat, plainMat)

def addRoundKey(plainMat, roundKey):
    
    for i in range(4):
        for j in range(4):
            plainMat[i][j] = plainMat[i][j] ^ roundKey[i][j]
    return plainMat

def round0(plainMat, roundKey):
    return addRoundKey(plainMat, roundKey)

def roundGeneral(plainMat, roundKey):
    plainMat = subBytes(plainMat, subMat)
    plainMat = shiftRows(plainMat)
    plainMat = mixColumns(plainMat, mixMat)
    plainMat = addRoundKey(plainMat, roundKey)
    return plainMat

def lastRound(plainMat, roundKey):
    plainMat = subBytes(plainMat, subMat)
    plainMat = shiftRows(plainMat)
    # plainMat = mixColumns(plainMat, mixMat)
    plainMat = addRoundKey(plainMat, roundKey)
    return plainMat

def aes(plainMat, roundKeys):
    plainMat = round0(plainMat, roundKeys[0])
    for i in range(1, len(roundKeys)-1):
        plainMat = roundGeneral(plainMat, roundKeys[i])
    plainMat =  lastRound(plainMat, roundKeys[-1])
    return plainMat



invSubMat = [
	[0x52,0x09,0x6A,0xD5,0x30,0x36,0xA5,0x38,0xBF,0x40,0xA3,0x9E,0x81,0xF3,0xD7,0xFB],
	[0x7C,0xE3,0x39,0x82,0x9B,0x2F,0xFF,0x87,0x34,0x8E,0x43,0x44,0xC4,0xDE,0xE9,0xCB],
	[0x54,0x7B,0x94,0x32,0xA6,0xC2,0x23,0x3D,0xEE,0x4C,0x95,0x0B,0x42,0xFA,0xC3,0x4E],
	[0x08,0x2E,0xA1,0x66,0x28,0xD9,0x24,0xB2,0x76,0x5B,0xA2,0x49,0x6D,0x8B,0xD1,0x25],
	[0x72,0xF8,0xF6,0x64,0x86,0x68,0x98,0x16,0xD4,0xA4,0x5C,0xCC,0x5D,0x65,0xB6,0x92],
	[0x6C,0x70,0x48,0x50,0xFD,0xED,0xB9,0xDA,0x5E,0x15,0x46,0x57,0xA7,0x8D,0x9D,0x84],
	[0x90,0xD8,0xAB,0x00,0x8C,0xBC,0xD3,0x0A,0xF7,0xE4,0x58,0x05,0xB8,0xB3,0x45,0x06],
	[0xD0,0x2C,0x1E,0x8F,0xCA,0x3F,0x0F,0x02,0xC1,0xAF,0xBD,0x03,0x01,0x13,0x8A,0x6B],
	[0x3A,0x91,0x11,0x41,0x4F,0x67,0xDC,0xEA,0x97,0xF2,0xCF,0xCE,0xF0,0xB4,0xE6,0x73],
	[0x96,0xAC,0x74,0x22,0xE7,0xAD,0x35,0x85,0xE2,0xF9,0x37,0xE8,0x1C,0x75,0xDF,0x6E],
	[0x47,0xF1,0x1A,0x71,0x1D,0x29,0xC5,0x89,0x6F,0xB7,0x62,0x0E,0xAA,0x18,0xBE,0x1B],
	[0xFC,0x56,0x3E,0x4B,0xC6,0xD2,0x79,0x20,0x9A,0xDB,0xC0,0xFE,0x78,0xCD,0x5A,0xF4],
	[0x1F,0xDD,0xA8,0x33,0x88,0x07,0xC7,0x31,0xB1,0x12,0x10,0x59,0x27,0x80,0xEC,0x5F],
	[0x60,0x51,0x7F,0xA9,0x19,0xB5,0x4A,0x0D,0x2D,0xE5,0x7A,0x9F,0x93,0xC9,0x9C,0xEF],
	[0xA0,0xE0,0x3B,0x4D,0xAE,0x2A,0xF5,0xB0,0xC8,0xEB,0xBB,0x3C,0x83,0x53,0x99,0x61],
	[0x17,0x2B,0x04,0x7E,0xBA,0x77,0xD6,0x26,0xE1,0x69,0x14,0x63,0x55,0x21,0x0C,0x7D]
]

invMixMat = [
    [0x0E, 0x0B, 0x0D, 0x09],
    [0x09, 0x0E, 0x0B, 0x0D],
    [0x0D, 0x09, 0x0E, 0x0B],
    [0x0B, 0x0D, 0x09, 0x0E],
]

def rotRight(row: list, n):
    for i in range(n):
        row.insert(0, row.pop())
    return row

def invShiftRows(encMat):
    # print(encMat)
    for i in range(1, 4):
        encMat[i] = rotRight(encMat[i], i)
    return encMat

def invSubBytes(encMat, invSubMat):
    substitutedMat = [[None for i in range(4)] for j in range(4)]
    for i in range(4):
        for j in range(4):
            ijHex = hex(encMat[i][j])[2:]
            ijHex = "0"*(2-len(ijHex)) + ijHex
            row = int(ijHex[0], 16)
            col = int(ijHex[1], 16)
            substitutedMat[i][j] = invSubMat[row][col]
    return substitutedMat

def invMixColumns(encMat, invMixMat):
    return matmult(invMixMat, encMat)

def invRound0(encMat, roundKey):
    addRoundKey(encMat, roundKey)
    return encMat

def invRoundGeneral(encMat, roundKey):
    encMat = invShiftRows(encMat)
    encMat = invSubBytes(encMat, invSubMat)
    encMat = addRoundKey(encMat, roundKey)
    encMat = invMixColumns(encMat, invMixMat)
    return encMat

def invLastRound(encMat, roundKey):
    encMat = invShiftRows(encMat)
    encMat = invSubBytes(encMat, invSubMat)
    encMat = addRoundKey(encMat, roundKey)
    # encMat = invMixColumns(encMat, invMixMat)
    return encMat   

def decryptionAES(encMat, roundKeys):
    encMat = invRound0(encMat, roundKeys[-1])
    for i in range(1, len(roundKeys)-1):
        encMat = invRoundGeneral(encMat, roundKeys[len(roundKeys)-i-1])
    encMat = invLastRound(encMat, roundKeys[0])
    return encMat
text  = input("Enter the hexadecimal plain text (128 bits): ")
plain = [[None for i in range(4)] for j in range(4)]
for i in range(0, 16):
   plain[i%4][i//4] = int(text[i*2:i*2+2], 16)
print("The plain matrix is :")
print(plain)
cipherKey = [0x24,0x75,0xa2,0xb3,0x34,0x75,0x56,0x88,0x31,0xe2,0x12,0x00,0x13,0xaa,0x54,0x87]

# key = input("Enter the 16 byte hexadecimal key: ")
# cipherKey = [None]*16
# for i in range(16):
#     cipherKey[i] = int(key[i*2:i*2+2], 16)
# print("The key is: ")
# print(cipherKey)

roundKeys = expandKey(cipherKey)

encryption = aes(plain, roundKeys) 
print("Encrypted matrix is : ")
print(encryption)

# encryptionHex = convertToHex(encryption)
# print("Encrypted matrix is : ")
# print(encryptionHex)


decryption = decryptionAES(encryption, roundKeys)
print("decryption is : ")
print(decryption)
# print(shiftRows(plain))
# print(subBytes(plain, subMat))
# print(plain[:][1])
# print(mixColumns(plain, mixMat))

# print(invShiftRows(plain))
# print(addRoundKey(plain, plain))
# print(convertToHex(plain))